Index: linux-llc-kernel/include/net/llc_pdu.h
diff -u linux-llc-kernel/include/net/llc_pdu.h:1.1.2.1 linux-llc-kernel/include/net/llc_pdu.h:1.1.2.2
--- linux-llc-kernel/include/net/llc_pdu.h:1.1.2.1	Sun May  5 23:47:54 2002
+++ linux-llc-kernel/include/net/llc_pdu.h	Mon May  6 01:50:47 2002
@@ -51,7 +51,8 @@
 #define LLC_PDU_TYPE_I         0           /* first bit */
 #define LLC_PDU_TYPE_S         1           /* first two bits */
 #define LLC_PDU_TYPE_U         3           /* first two bits */
-
+#define LLC_PDU_TYPE_XID       4	   /* special type for xid pdu_init. */
+	
 #define LLC_PDU_TYPE_IS_I(pdu) \
            ((!(pdu->ctrl_1 & LLC_PDU_TYPE_I_MASK)) ? 0 : 1)
 
Index: linux-llc-kernel/net/llc/llc_conn.c
diff -u linux-llc-kernel/net/llc/llc_conn.c:1.1.2.1 linux-llc-kernel/net/llc/llc_conn.c:1.1.2.2
--- linux-llc-kernel/net/llc/llc_conn.c:1.1.2.1	Sun May  5 23:48:02 2002
+++ linux-llc-kernel/net/llc/llc_conn.c	Mon May  6 01:50:48 2002
@@ -422,7 +422,8 @@
 		struct llc_opt *llc = list_entry(entry, struct llc_opt, node);
 
 		if (!memcmp(llc->laddr.mac, local_addr->mac, MAC_ADDR_LEN) &&
-		    !memcmp(llc->daddr.mac, remote_addr->mac, MAC_ADDR_LEN)) {
+		    !memcmp(llc->daddr.mac, remote_addr->mac, MAC_ADDR_LEN) &&
+		    llc->daddr.lsap == remote_addr->lsap) {
 			rc = sock_list_entry(entry, struct llc_opt, node);
 			break;
 		}
Index: linux-llc-kernel/net/llc/llc_mac.c
diff -u linux-llc-kernel/net/llc/llc_mac.c:1.1.2.1 linux-llc-kernel/net/llc/llc_mac.c:1.1.2.2
--- linux-llc-kernel/net/llc/llc_mac.c:1.1.2.1	Sun May  5 23:48:03 2002
+++ linux-llc-kernel/net/llc/llc_mac.c	Mon May  6 02:04:50 2002
@@ -13,6 +13,10 @@
  */
 #include <linux/netdevice.h>
 #include <linux/if_arp.h>
+#ifdef CONFIG_TR
+#include <linux/if_tr.h>
+#include <linux/trdevice.h>
+#endif
 #include <net/llc_if.h>
 #include <net/llc_mac.h>
 #include <net/llc_pdu.h>
@@ -249,7 +253,7 @@
 				memset(trh->sa, 0, dev->addr_len);
 			if (da) {
 				memcpy(trh->da, da, dev->addr_len);
-				tr_source_route((struct trh_hdr *)trh, dev);
+				tr_source_route(skb, (struct trh_hdr *)trh, dev);
 			}
 			skb->mac.raw = skb->data;
 			break;
Index: linux-llc-kernel/net/llc/llc_pdu.c
diff -u linux-llc-kernel/net/llc/llc_pdu.c:1.1.2.1 linux-llc-kernel/net/llc/llc_pdu.c:1.1.2.2
--- linux-llc-kernel/net/llc/llc_pdu.c:1.1.2.1	Sun May  5 23:48:03 2002
+++ linux-llc-kernel/net/llc/llc_pdu.c	Mon May  6 01:50:48 2002
@@ -222,7 +222,6 @@
 	xid_info->fmt_id = XID_FMT_ID;    /* 0x81*/
 	xid_info->type = svcs_supported;
 	xid_info->rw = (rx_window << 1);  /* size of recieve window */
-	skb_put(skb, 3);
 	return 0;
 }
 
@@ -618,6 +617,9 @@
 			break;
 		case LLC_PDU_TYPE_U:
 			rtn_val = 3;
+			break;
+		case LLC_PDU_TYPE_XID:
+			rtn_val = 6;
 			break;
 	}
 	return rtn_val;
Index: linux-llc-kernel/net/llc/llc_s_ac.c
diff -u linux-llc-kernel/net/llc/llc_s_ac.c:1.1.2.1 linux-llc-kernel/net/llc/llc_s_ac.c:1.1.2.2
--- linux-llc-kernel/net/llc/llc_s_ac.c:1.1.2.1	Sun May  5 23:48:04 2002
+++ linux-llc-kernel/net/llc/llc_s_ac.c	Mon May  6 01:50:48 2002
@@ -83,7 +83,7 @@
 	struct sk_buff *skb = prim_data->skb;
 	int rc;
 	
-	llc_pdu_header_init(skb, LLC_PDU_TYPE_U, prim_data->saddr.lsap,
+	llc_pdu_header_init(skb, LLC_PDU_TYPE_XID, prim_data->saddr.lsap,
 			    prim_data->daddr.lsap, LLC_PDU_CMD);
 	rc = llc_pdu_init_as_xid_cmd(skb, XID_NULL_CLASS_2, 0);
 	if (rc)
Index: linux-llc-kernel/net/llc/llc_sock.c
diff -u linux-llc-kernel/net/llc/llc_sock.c:1.1.2.1 linux-llc-kernel/net/llc/llc_sock.c:1.1.2.2
--- linux-llc-kernel/net/llc/llc_sock.c:1.1.2.1	Sun May  5 23:48:04 2002
+++ linux-llc-kernel/net/llc/llc_sock.c	Mon May  6 01:50:48 2002
@@ -45,7 +45,8 @@
 
 static u16 llc_ui_sap_last_autoport;
 static u16 llc_ui_sap_link_no_max[256];
-static u8 llc_ui_addrany[IFHWADDRLEN]; /* zeroed because its in .bss */
+static u8 llc_ui_addrany[IFHWADDRLEN]; 		/* zeroed because its in .bss */
+static struct sockaddr_llc llc_ui_addrnull;	/* zeroed because its in .bss */
 static struct sock *llc_ui_sockets;
 static struct proto_ops llc_ui_ops;
 static rwlock_t llc_ui_sockets_lock = RW_LOCK_UNLOCKED;
@@ -93,6 +94,15 @@
 }
 
 /**
+ *	llc_ui_addr_null - determines if a address structure is NULL
+ *	@addr: Address to test if NULL.
+ */	
+static inline u8 llc_ui_addr_null(struct sockaddr_llc *addr)
+{
+	return !memcmp(addr, &llc_ui_addrnull, sizeof(*addr));
+}
+
+/**
  *	llc_ui_protocol_type - return eth protocol for ARP header type
  *	@arphrd: ARP header type.
  *
@@ -122,9 +132,11 @@
 {
 	u8 rc = LLC_PDU_LEN_U;
 
-	if (addr->sllc_test || addr->sllc_xid)
+	if (addr->sllc_test || addr->sllc_xid) {
 		rc = LLC_PDU_LEN_U;
-	else if (sk->type == SOCK_STREAM)
+		if (addr->sllc_xid)
+			rc += 3;
+	} else if (sk->type == SOCK_STREAM)
 		rc = LLC_PDU_LEN_I;
 	return rc;
 }
@@ -203,7 +215,8 @@
 	union llc_u_prim_data prim_data;
 	struct llc_prim_if_block prim;
 	struct sock* core_sk = LLC_UI_SK(sk)->core_sk;
-
+	int rc;
+	
 	prim.data	   = &prim_data;
 	prim.sap	   = sap;
 	prim.prim	   = LLC_DATA_PRIM;
@@ -211,8 +224,12 @@
 	prim_data.data.pri = 0;
 	prim_data.data.sk  = core_sk;
 	skb->protocol	   = llc_ui_protocol_type(addr->sllc_arphrd);
-	wait_event(sk->socket->wait, !LLC_SK(core_sk)->failed_data_req);
-	return sap->req(&prim);
+	rc = wait_event_interruptible(sk->socket->wait, 
+		!LLC_SK(core_sk)->failed_data_req);
+	if (rc < 0)
+		goto out;
+	rc = sap->req(&prim);
+out:	return rc;
 }
 
 /**
@@ -300,6 +317,23 @@
 	return sk;
 }
 
+static struct sock *__llc_ui_find_sk_by_exact(struct llc_addr *laddr,
+					      struct llc_addr *daddr)
+{
+	struct sock *sk;
+
+	for (sk = llc_ui_sockets; sk; sk = sk->next) {
+		struct llc_ui_opt *llc = LLC_UI_SK(sk);
+		if (llc_ui_mac_null(llc->addr.sllc_mmac) &&
+		    llc_ui_mac_match(llc->addr.sllc_smac, laddr->mac) &&
+		    llc_ui_mac_match(llc->addr.sllc_dmac, daddr->mac) &&
+		    llc->addr.sllc_ssap == laddr->lsap &&
+		    llc->addr.sllc_dsap == daddr->lsap)
+			break;
+	}
+	return sk;
+}
+
 /**
  *	__llc_ui_find_sk_by_addr - return socket matching local mac + sap.
  *	@addr: Local address to match.
@@ -310,39 +344,45 @@
  *	for connected sockets.
  *	Returns sock upon match, %NULL otherwise.
  */
-static struct sock *__llc_ui_find_sk_by_addr(struct llc_addr *addr,
-					     struct net_device *dev)
+static struct sock *__llc_ui_find_sk_by_addr(struct llc_addr *laddr,
+			struct llc_addr *daddr, struct net_device *dev)
 {
-	struct sock *sk;
+	struct sock *sk, *tmp_sk;
 
 	for (sk = llc_ui_sockets; sk; sk = sk->next) {
 		struct llc_ui_opt *llc = LLC_UI_SK(sk);
 
-		if (!llc->sap || llc->sap->laddr.lsap != addr->lsap)
+		if (llc->addr.sllc_ssap != laddr->lsap)
 			continue;
-		if (!llc->dev) {
+		if (llc_ui_mac_null(llc->addr.sllc_smac)) {
 			if (!llc_ui_mac_null(llc->addr.sllc_mmac) &&
-			    !llc_ui_mac_match(addr->mac, llc->addr.sllc_mmac))
+			    !llc_ui_mac_match(llc->addr.sllc_mmac, laddr->mac))
 				continue;
 			break;
 		}
-		if (llc_ui_mac_match(addr->mac, llc->addr.sllc_smac) &&
-		    llc_ui_mac_null(llc->addr.sllc_mmac))
-			break;
-		if (!llc_ui_mac_null(llc->addr.sllc_mmac) &&
-		    llc_ui_mac_match(addr->mac, llc->addr.sllc_mmac) &&
+		if (dev && !llc_ui_mac_null(llc->addr.sllc_mmac) &&
+		    llc_ui_mac_match(llc->addr.sllc_mmac, laddr->mac) &&
 		    llc_ui_mac_match(llc->addr.sllc_smac, dev->dev_addr))
 			break;
+		if (llc_ui_mac_match(llc->addr.sllc_smac, laddr->mac)) {
+			tmp_sk = __llc_ui_find_sk_by_exact(laddr, daddr);
+			if (tmp_sk) {
+				sk = tmp_sk;
+				break;
+			}
+			if (llc_ui_mac_null(llc->addr.sllc_dmac))
+				break;
+		}
 	}
 	return sk;
 }
 
 static struct sock *llc_ui_find_sk_by_addr(struct llc_addr *addr,
-					   struct net_device *dev)
+			struct llc_addr *daddr, struct net_device *dev)
 {
 	struct sock *sk;
 	read_lock(&llc_ui_sockets_lock);
-	sk = __llc_ui_find_sk_by_addr(addr, dev);
+	sk = __llc_ui_find_sk_by_addr(addr, daddr, dev);
 	if (sk)
 		sock_hold(sk);
 	read_unlock(&llc_ui_sockets_lock);
@@ -350,11 +390,11 @@
 }
 
 static struct sock *llc_ui_bh_find_sk_by_addr(struct llc_addr *addr,
-					      struct net_device *dev)
+			struct llc_addr *daddr, struct net_device *dev)
 {
 	struct sock *sk;
 	read_lock_bh(&llc_ui_sockets_lock);
-	sk = __llc_ui_find_sk_by_addr(addr, dev);
+	sk = __llc_ui_find_sk_by_addr(addr, daddr, dev);
 	if (sk)
 		sock_hold(sk);
 	read_unlock_bh(&llc_ui_sockets_lock);
@@ -575,20 +615,25 @@
 		if (!sap)
 			goto out;
 	} else {
-		struct llc_addr local_addr;
+		struct llc_addr local_addr, remote_addr;
 		struct sock *ask;
 
 		rc = -EUSERS; /* can't get exclusive use of sap */
 		if (!dev && llc_ui_mac_null(addr->sllc_mmac))
 			goto out;
 		memset(&local_addr, 0, sizeof(local_addr));
-		if (!llc_ui_mac_null(addr->sllc_mmac))
+		memset(&remote_addr, 0, sizeof(remote_addr));
+		if (!llc_ui_mac_null(addr->sllc_mmac)) {
+			if (sk->type != SOCK_DGRAM) {
+				rc = -EOPNOTSUPP;
+				goto out;
+			}
 			memcpy(local_addr.mac, addr->sllc_mmac, IFHWADDRLEN);
-		else
+		} else
 			memcpy(local_addr.mac, addr->sllc_smac, IFHWADDRLEN);
 		local_addr.lsap = addr->sllc_ssap;
 		rc = -EADDRINUSE;   /* mac + sap clash. */
-		ask = llc_ui_bh_find_sk_by_addr(&local_addr, dev);
+		ask = llc_ui_bh_find_sk_by_addr(&local_addr, &remote_addr, dev);
 		if (ask) {
 			sock_put(ask);
 			goto out;
@@ -696,35 +741,28 @@
 	rc = -EAFNOSUPPORT;
 	if (addr->sllc_family != AF_LLC)
 		goto out;
-	rc = -EINVAL;
-	if (sk->type != SOCK_STREAM)
-		goto out;
-	rc = -EALREADY;
-	if (sock->state == SS_CONNECTING)
-		goto out;
-	sock->state = SS_CONNECTING;
-	sk->state   = TCP_SYN_SENT;
-	/* must bind connection to sap if user hasn't done it. */
+	/* bind connection to sap if user hasn't done it. */
 	if (sk->zapped) {
 		/* bind to sap with null dev, exclusive */
 		rc = llc_ui_autobind(sock, addr);
-		if (rc) {
-			sock->state = SS_UNCONNECTED;
-			sk->state   = TCP_CLOSE;
+		if (rc)
 			goto out;
-		}
 	}
 	if (!llc->dev) {
 		rtnl_lock();
 		dev = dev_getbyhwaddr(addr->sllc_arphrd, addr->sllc_smac);
 		rtnl_unlock();
-		if (!dev) {
-			sock->state = SS_UNCONNECTED;
-			sk->state   = TCP_CLOSE;
+		if (!dev)
 			goto out;
-		}
 	} else
 		dev = llc->dev;
+	if (sk->type != SOCK_STREAM)
+		goto out;
+	rc = -EALREADY;
+	if (sock->state == SS_CONNECTING)
+		goto out;
+	sock->state = SS_CONNECTING;
+	sk->state   = TCP_SYN_SENT;
 	llc->link = llc_ui_next_link_no(llc->sap->laddr.lsap);
 	rc = llc_ui_send_conn(sk, llc->sap, addr, dev, llc->link);
 	if (rc) {
@@ -886,6 +924,9 @@
 	LLC_UI_SK(newsk)->core_sk = skb->sk;
 	memcpy(&LLC_UI_SK(newsk)->addr, &LLC_UI_SK(sk)->addr,
 	       sizeof(LLC_UI_SK(sk)->addr));
+	memcpy(LLC_UI_SK(newsk)->addr.sllc_dmac, LLC_SK(skb->sk)->daddr.mac,
+                IFHWADDRLEN);
+        LLC_UI_SK(newsk)->addr.sllc_dsap = LLC_SK(skb->sk)->daddr.lsap;
 	/* put orignal socket back into a clean listen state. */
 	sk->state		  = TCP_LISTEN;
 	sk->ack_backlog--;
@@ -969,21 +1010,18 @@
 	if (flags & ~MSG_DONTWAIT)
 		goto release;
 	rc = -EINVAL;
-	if (sk->type == SOCK_DGRAM && msg->msg_namelen < sizeof(*addr))
+	if (addr && msg->msg_namelen < sizeof(*addr))
 		goto release;
-	if (sk->type == SOCK_STREAM && !addr)
-		addr = &llc->addr;
-	if (!addr)
+	if (!addr && llc_ui_addr_null(&llc->addr))
 		goto release;
+	if (!addr)
+		addr = &llc->addr;
 	/* must bind connection to sap if user hasn't done it. */
 	if (sk->zapped) {
 		/* bind to sap with null dev, exclusive. */
 		rc = llc_ui_autobind(sock, addr);
-		if (rc) {
-			sock->state = SS_UNCONNECTED;
-			sk->state   = TCP_CLOSE;
+		if (rc)
 			goto release;
-		}
 	}
 	if (!llc->dev) {
 		rtnl_lock();
@@ -1250,7 +1288,8 @@
 	struct llc_prim_test *prim_data = &prim->data->test;
 	struct sockaddr_llc *llc;
 	struct sk_buff *skb2, *skb = prim_data->skb;
-	struct sock *sk = llc_ui_find_sk_by_addr(&prim_data->daddr, skb->dev);
+	struct sock *sk = llc_ui_find_sk_by_addr(&prim_data->daddr, 
+		&prim_data->saddr, skb->dev);
 
 	if (!sk)
 		goto out;
@@ -1289,7 +1328,8 @@
 	struct llc_prim_xid *prim_data = &prim->data->xid;
 	struct sk_buff *skb2, *skb = prim_data->skb;
 	struct sockaddr_llc *llc;
-	struct sock *sk = llc_ui_find_sk_by_addr(&prim_data->daddr, skb->dev);
+	struct sock *sk = llc_ui_find_sk_by_addr(&prim_data->daddr, 
+		&prim_data->saddr, skb->dev);
 
 	if (!sk)
 		goto out;
@@ -1329,7 +1369,8 @@
 	struct llc_prim_unit_data *prim_data = &prim->data->udata;
 	struct sockaddr_llc *llc;
 	struct sk_buff *skb2, *skb = prim_data->skb;
-	struct sock *sk = llc_ui_find_sk_by_addr(&prim_data->daddr, skb->dev);
+	struct sock *sk = llc_ui_find_sk_by_addr(&prim_data->daddr, 
+		&prim_data->saddr, skb->dev);
 
 	if (!sk)
 		goto out;
@@ -1372,6 +1413,7 @@
 
 	LLC_SK(prim_data->sk)->laddr.lsap = prim->sap->laddr.lsap;
 	sk = llc_ui_find_sk_by_addr(&LLC_SK(prim_data->sk)->laddr,
+				    &prim_data->saddr,
 				    prim_data->dev);
 	if (!sk)
 		goto out;
@@ -1499,6 +1541,7 @@
 {
 	struct llc_prim_conn *prim_data = &prim->data->conn;
 	struct sock *sk = llc_ui_find_sk_by_addr(&LLC_SK(prim_data->sk)->laddr,
+						 &LLC_SK(prim_data->sk)->daddr,
 						 prim_data->dev);
 
 	if (!sk)
@@ -1648,20 +1691,12 @@
 			len += sprintf(buffer + len,
 				"%02X:%02X:%02X:%02X:%02X:%02X@0x%02X ",
 				0, 0, 0, 0, 0, 0, 0);
-		if (llc->core_sk) {
-			len += sprintf(buffer + len,
-				"%02X:%02X:%02X:%02X:%02X:%02X@0x%02X ",
-				LLC_SK(llc->core_sk)->daddr.mac[0],
-				LLC_SK(llc->core_sk)->daddr.mac[1],
-				LLC_SK(llc->core_sk)->daddr.mac[2],
-				LLC_SK(llc->core_sk)->daddr.mac[3],
-				LLC_SK(llc->core_sk)->daddr.mac[4],
-				LLC_SK(llc->core_sk)->daddr.mac[5],
-				LLC_SK(llc->core_sk)->daddr.lsap);
-		} else
-			len += sprintf(buffer + len,
-					"%02X:%02X:%02X:%02X:%02X:%02X@0x%02X ",
-					0, 0, 0, 0, 0, 0, 0);
+		len += sprintf(buffer + len,
+			"%02X:%02X:%02X:%02X:%02X:%02X@0x%02X ",
+			llc->addr.sllc_dmac[0], llc->addr.sllc_dmac[1],
+			llc->addr.sllc_dmac[2], llc->addr.sllc_dmac[3],
+			llc->addr.sllc_dmac[4], llc->addr.sllc_dmac[5],
+			llc->addr.sllc_dsap);
 		len += sprintf(buffer + len, "%08X:%08X ",
 				atomic_read(&s->wmem_alloc),
 				atomic_read(&s->rmem_alloc));
